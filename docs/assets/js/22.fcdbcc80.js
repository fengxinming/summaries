(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{388:function(e,t,v){"use strict";v.r(t);var l=v(45),_=Object(l.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"react"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[e._v("#")]),e._v(" React")]),e._v(" "),v("h2",{attrs:{id:"react-和-vue-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-和-vue-的区别"}},[e._v("#")]),e._v(" React 和 Vue 的区别")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("监听数据变化的实现原理")]),e._v(" "),v("ul",[v("li",[e._v("React通过 shouldComponentUpdate 钩子函数控制是否重新渲染整个组件树")]),e._v(" "),v("li",[e._v("Vue通过 getter/setter 以及一些函数的劫持，能精确地计算出虚拟dom的差异，渲染依赖的组件树，不需要重新渲染整个组件树")])])]),e._v(" "),v("li",[v("p",[e._v("HOC和mixins")]),e._v(" "),v("ul",[v("li",[e._v("React通过HOC在不修改原组件的情况下扩展组件周期函数和功能。")]),e._v(" "),v("li",[e._v("Vue使用mixin方法扩展周期函数和功能，这种方式对组件的侵入式强。")])])]),e._v(" "),v("li",[v("p",[e._v("组件通信")]),e._v(" "),v("ul",[v("li",[e._v("React\n"),v("ul",[v("li",[e._v("父组件通过props向子组件传递数据或者回调")]),e._v(" "),v("li",[e._v("通过 Provider/Consumer 进行跨层级的通信")])])]),e._v(" "),v("li",[e._v("Vue\n"),v("ul",[v("li",[e._v("父组件通过props向子组件传递数据和使用事件回调接收子组件回传")]),e._v(" "),v("li",[e._v("通过v-model或者.sync语法糖实现双向数据绑定")]),e._v(" "),v("li",[e._v("通过 provide/inject 进行跨层级的通信")])])])])]),e._v(" "),v("li",[v("p",[e._v("模板渲染方式")]),e._v(" "),v("ul",[v("li",[e._v("React使用js和html的混合语法jsx开发项目")]),e._v(" "),v("li",[e._v("Vue使用vue模板，html、css和js结构分离的形式开发")])])]),e._v(" "),v("li",[v("p",[e._v("框架本质不同")]),e._v(" "),v("ul",[v("li",[e._v("React是前端组件化框架，由后端组件化演变而来")]),e._v(" "),v("li",[e._v("Vue本质是MVVM框架，由MVC架构演变而来")])])])])])}),[],!1,null,null,null);t.default=_.exports}}]);